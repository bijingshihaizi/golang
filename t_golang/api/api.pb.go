// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.9.2
// source: api.proto

package api

import (
	context "context"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 充电状态
type ChargeStatus int32

const (
	// 未连接外部电源正在放电
	ChargeStatus_DISCHARGE ChargeStatus = 0
	// 连接外部电源正在充电
	ChargeStatus_CHARGE ChargeStatus = 1
	// 连接外部电源但不在充电
	ChargeStatus_CONNECTED_BUT_NOT_CHARGE ChargeStatus = 2
)

// Enum value maps for ChargeStatus.
var (
	ChargeStatus_name = map[int32]string{
		0: "DISCHARGE",
		1: "CHARGE",
		2: "CONNECTED_BUT_NOT_CHARGE",
	}
	ChargeStatus_value = map[string]int32{
		"DISCHARGE":                0,
		"CHARGE":                   1,
		"CONNECTED_BUT_NOT_CHARGE": 2,
	}
)

func (x ChargeStatus) Enum() *ChargeStatus {
	p := new(ChargeStatus)
	*p = x
	return p
}

func (x ChargeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[0].Descriptor()
}

func (ChargeStatus) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[0]
}

func (x ChargeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargeStatus.Descriptor instead.
func (ChargeStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

// 终端上主芯片的ID
type ShipId int32

const (
	// 展讯6531D
	ShipId_ZX6531D ShipId = 0
	//展讯6531DA
	ShipId_ZX6531DA ShipId = 1
)

// Enum value maps for ShipId.
var (
	ShipId_name = map[int32]string{
		0: "ZX6531D",
		1: "ZX6531DA",
	}
	ShipId_value = map[string]int32{
		"ZX6531D":  0,
		"ZX6531DA": 1,
	}
)

func (x ShipId) Enum() *ShipId {
	p := new(ShipId)
	*p = x
	return p
}

func (x ShipId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShipId) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[1].Descriptor()
}

func (ShipId) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[1]
}

func (x ShipId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShipId.Descriptor instead.
func (ShipId) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

// 告警类型
type AlarmType int32

const (
	// 实时位置更新
	AlarmType_LOCATION_UPDATE AlarmType = 0
	// 震动告警
	AlarmType_DISTURBANCE AlarmType = 1
	// 低电告警
	AlarmType_BATTERY_LOW AlarmType = 2
	// 满电告警
	AlarmType_BATTERY_FULL AlarmType = 3
	// SOS告警
	AlarmType_SOS AlarmType = 4
	// 状态报告
	AlarmType_STATUS AlarmType = 5
	// 断电告警
	AlarmType_POWER_DISCONNECTED AlarmType = 6
	// 自检异常
	AlarmType_CHECK AlarmType = 7
	// 急加速告警
	AlarmType_RAPID_ACCELERATION AlarmType = 8
	// 急减速告警
	AlarmType_HARSH_BRAKING AlarmType = 9
	// ACC异常
	AlarmType_ACC_ABNORMAL AlarmType = 10
	// 紧急报警
	AlarmType_EMERGENCY AlarmType = 11
	// 超速报警
	AlarmType_OVER_SPEED AlarmType = 12
	// 疲劳驾驶
	AlarmType_FATIGUE_DRIVING AlarmType = 13
	// 危险预警
	AlarmType_DANGER AlarmType = 14
	// GNSS模块发生故障
	AlarmType_GNSS_MALFUNCTION AlarmType = 15
	// GNSS天线未接或被剪断
	AlarmType_GNSS_DISCONNECTED AlarmType = 16
	// GNSS天线短路
	AlarmType_GNSS_SHORT AlarmType = 17
	// 终端主电源欠压
	AlarmType_TERMINAL_UNDER_VOLTAGE AlarmType = 18
	// 终端主电源掉电
	AlarmType_TERMINAL_DOWN AlarmType = 19
	// 终端LCD或显示器故障
	AlarmType_DISPLAY_MALFUNCTION AlarmType = 20
	// TTS模块故障
	AlarmType_TTS_MALFUNCTION AlarmType = 21
	// 摄像头故障
	AlarmType_CAMERA_MALFUNCTION AlarmType = 22
	// 道路运输证IC卡模块故障
	AlarmType_IC_MALFUNCTION AlarmType = 23
	// 超速预警
	AlarmType_SPEED_WARNING AlarmType = 24
	// 疲劳驾驶预警
	AlarmType_FATIGUE_WARNING AlarmType = 25
	// 当天累计驾驶超时
	AlarmType_OVERTIME_DRIVING AlarmType = 26
	// 超时停车
	AlarmType_OVERTIME_PARKING AlarmType = 27
	// 进出区域
	AlarmType_ACCESS_AREA AlarmType = 28
	// 进出路线
	AlarmType_ACCESS_ROUTE AlarmType = 29
	// 路段行驶时间不足/过长
	AlarmType_ROAD_TIME AlarmType = 30
	// 路线偏离报警
	AlarmType_ROUTE_DEVIATION AlarmType = 31
	// 车辆VSS故障
	AlarmType_VSS_MALFUNCTION AlarmType = 32
	// 车辆油量异常
	AlarmType_ABNORMAL_OIL AlarmType = 33
	// 车辆被盗
	AlarmType_VEHICLE_STOLEN AlarmType = 34
	// 车辆非法点火
	AlarmType_ABNORMAL_IGNITION AlarmType = 35
	// 车辆非法位移
	AlarmType_ABNORMAL_MOVEMENT AlarmType = 36
	// 碰撞预警
	AlarmType_COLLISION_WARNING AlarmType = 37
	// 侧翻预警
	AlarmType_ROLLOVER_WARNING AlarmType = 38
	// 非法开门报警
	AlarmType_ABNORMAL_OPEN AlarmType = 39
)

// Enum value maps for AlarmType.
var (
	AlarmType_name = map[int32]string{
		0:  "LOCATION_UPDATE",
		1:  "DISTURBANCE",
		2:  "BATTERY_LOW",
		3:  "BATTERY_FULL",
		4:  "SOS",
		5:  "STATUS",
		6:  "POWER_DISCONNECTED",
		7:  "CHECK",
		8:  "RAPID_ACCELERATION",
		9:  "HARSH_BRAKING",
		10: "ACC_ABNORMAL",
		11: "EMERGENCY",
		12: "OVER_SPEED",
		13: "FATIGUE_DRIVING",
		14: "DANGER",
		15: "GNSS_MALFUNCTION",
		16: "GNSS_DISCONNECTED",
		17: "GNSS_SHORT",
		18: "TERMINAL_UNDER_VOLTAGE",
		19: "TERMINAL_DOWN",
		20: "DISPLAY_MALFUNCTION",
		21: "TTS_MALFUNCTION",
		22: "CAMERA_MALFUNCTION",
		23: "IC_MALFUNCTION",
		24: "SPEED_WARNING",
		25: "FATIGUE_WARNING",
		26: "OVERTIME_DRIVING",
		27: "OVERTIME_PARKING",
		28: "ACCESS_AREA",
		29: "ACCESS_ROUTE",
		30: "ROAD_TIME",
		31: "ROUTE_DEVIATION",
		32: "VSS_MALFUNCTION",
		33: "ABNORMAL_OIL",
		34: "VEHICLE_STOLEN",
		35: "ABNORMAL_IGNITION",
		36: "ABNORMAL_MOVEMENT",
		37: "COLLISION_WARNING",
		38: "ROLLOVER_WARNING",
		39: "ABNORMAL_OPEN",
	}
	AlarmType_value = map[string]int32{
		"LOCATION_UPDATE":        0,
		"DISTURBANCE":            1,
		"BATTERY_LOW":            2,
		"BATTERY_FULL":           3,
		"SOS":                    4,
		"STATUS":                 5,
		"POWER_DISCONNECTED":     6,
		"CHECK":                  7,
		"RAPID_ACCELERATION":     8,
		"HARSH_BRAKING":          9,
		"ACC_ABNORMAL":           10,
		"EMERGENCY":              11,
		"OVER_SPEED":             12,
		"FATIGUE_DRIVING":        13,
		"DANGER":                 14,
		"GNSS_MALFUNCTION":       15,
		"GNSS_DISCONNECTED":      16,
		"GNSS_SHORT":             17,
		"TERMINAL_UNDER_VOLTAGE": 18,
		"TERMINAL_DOWN":          19,
		"DISPLAY_MALFUNCTION":    20,
		"TTS_MALFUNCTION":        21,
		"CAMERA_MALFUNCTION":     22,
		"IC_MALFUNCTION":         23,
		"SPEED_WARNING":          24,
		"FATIGUE_WARNING":        25,
		"OVERTIME_DRIVING":       26,
		"OVERTIME_PARKING":       27,
		"ACCESS_AREA":            28,
		"ACCESS_ROUTE":           29,
		"ROAD_TIME":              30,
		"ROUTE_DEVIATION":        31,
		"VSS_MALFUNCTION":        32,
		"ABNORMAL_OIL":           33,
		"VEHICLE_STOLEN":         34,
		"ABNORMAL_IGNITION":      35,
		"ABNORMAL_MOVEMENT":      36,
		"COLLISION_WARNING":      37,
		"ROLLOVER_WARNING":       38,
		"ABNORMAL_OPEN":          39,
	}
)

func (x AlarmType) Enum() *AlarmType {
	p := new(AlarmType)
	*p = x
	return p
}

func (x AlarmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlarmType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[2].Descriptor()
}

func (AlarmType) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[2]
}

func (x AlarmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlarmType.Descriptor instead.
func (AlarmType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

// 2.4G通讯状态
type CommunicationStatus2Dot4G int32

const (
	//2.4G功能关闭
	CommunicationStatus2Dot4G_COMMUNICATION_CLOSE CommunicationStatus2Dot4G = 0
	// 2.4G通讯正常
	CommunicationStatus2Dot4G_COMMUNICATION_NORMAL CommunicationStatus2Dot4G = 1
	//2.4G通讯异常
	CommunicationStatus2Dot4G_COMMUNICATION_ABNORMAL CommunicationStatus2Dot4G = 2
)

// Enum value maps for CommunicationStatus2Dot4G.
var (
	CommunicationStatus2Dot4G_name = map[int32]string{
		0: "COMMUNICATION_CLOSE",
		1: "COMMUNICATION_NORMAL",
		2: "COMMUNICATION_ABNORMAL",
	}
	CommunicationStatus2Dot4G_value = map[string]int32{
		"COMMUNICATION_CLOSE":    0,
		"COMMUNICATION_NORMAL":   1,
		"COMMUNICATION_ABNORMAL": 2,
	}
)

func (x CommunicationStatus2Dot4G) Enum() *CommunicationStatus2Dot4G {
	p := new(CommunicationStatus2Dot4G)
	*p = x
	return p
}

func (x CommunicationStatus2Dot4G) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommunicationStatus2Dot4G) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[3].Descriptor()
}

func (CommunicationStatus2Dot4G) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[3]
}

func (x CommunicationStatus2Dot4G) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommunicationStatus2Dot4G.Descriptor instead.
func (CommunicationStatus2Dot4G) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

// 感光状态
type PhotosensitiveStatus int32

const (
	//感光功能关
	PhotosensitiveStatus_PHOTOSENSITIVE_CLOSE PhotosensitiveStatus = 0
	// 无光
	PhotosensitiveStatus_NO_LIGHT PhotosensitiveStatus = 1
	// 有光
	PhotosensitiveStatus_LIGHT PhotosensitiveStatus = 2
)

// Enum value maps for PhotosensitiveStatus.
var (
	PhotosensitiveStatus_name = map[int32]string{
		0: "PHOTOSENSITIVE_CLOSE",
		1: "NO_LIGHT",
		2: "LIGHT",
	}
	PhotosensitiveStatus_value = map[string]int32{
		"PHOTOSENSITIVE_CLOSE": 0,
		"NO_LIGHT":             1,
		"LIGHT":                2,
	}
)

func (x PhotosensitiveStatus) Enum() *PhotosensitiveStatus {
	p := new(PhotosensitiveStatus)
	*p = x
	return p
}

func (x PhotosensitiveStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhotosensitiveStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[4].Descriptor()
}

func (PhotosensitiveStatus) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[4]
}

func (x PhotosensitiveStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhotosensitiveStatus.Descriptor instead.
func (PhotosensitiveStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

// WiFi的模式
type WiFiMode int32

const (
	//STATION模式
	WiFiMode_STATION WiFiMode = 0
	//AP模式
	WiFiMode_AP WiFiMode = 1
)

// Enum value maps for WiFiMode.
var (
	WiFiMode_name = map[int32]string{
		0: "STATION",
		1: "AP",
	}
	WiFiMode_value = map[string]int32{
		"STATION": 0,
		"AP":      1,
	}
)

func (x WiFiMode) Enum() *WiFiMode {
	p := new(WiFiMode)
	*p = x
	return p
}

func (x WiFiMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WiFiMode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[5].Descriptor()
}

func (WiFiMode) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[5]
}

func (x WiFiMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WiFiMode.Descriptor instead.
func (WiFiMode) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

// 车辆发动机状态
type VehicleEngineStatus int32

const (
	//不支持该参数
	VehicleEngineStatus_NOT_SUPPORTED VehicleEngineStatus = 0
	//发动机点火
	VehicleEngineStatus_ENGINE_IGNITION VehicleEngineStatus = 1
	//发动机熄火
	VehicleEngineStatus_ENGINE_STALL VehicleEngineStatus = 2
)

// Enum value maps for VehicleEngineStatus.
var (
	VehicleEngineStatus_name = map[int32]string{
		0: "NOT_SUPPORTED",
		1: "ENGINE_IGNITION",
		2: "ENGINE_STALL",
	}
	VehicleEngineStatus_value = map[string]int32{
		"NOT_SUPPORTED":   0,
		"ENGINE_IGNITION": 1,
		"ENGINE_STALL":    2,
	}
)

func (x VehicleEngineStatus) Enum() *VehicleEngineStatus {
	p := new(VehicleEngineStatus)
	*p = x
	return p
}

func (x VehicleEngineStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleEngineStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[6].Descriptor()
}

func (VehicleEngineStatus) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[6]
}

func (x VehicleEngineStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleEngineStatus.Descriptor instead.
func (VehicleEngineStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

// 车灯状态
type VehicleLightStatus int32

const (
	//车灯关
	VehicleLightStatus_LIGHT_CLOSE VehicleLightStatus = 0
	//车灯闪烁
	VehicleLightStatus_LIGHT_FLASHING VehicleLightStatus = 1
)

// Enum value maps for VehicleLightStatus.
var (
	VehicleLightStatus_name = map[int32]string{
		0: "LIGHT_CLOSE",
		1: "LIGHT_FLASHING",
	}
	VehicleLightStatus_value = map[string]int32{
		"LIGHT_CLOSE":    0,
		"LIGHT_FLASHING": 1,
	}
)

func (x VehicleLightStatus) Enum() *VehicleLightStatus {
	p := new(VehicleLightStatus)
	*p = x
	return p
}

func (x VehicleLightStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleLightStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[7].Descriptor()
}

func (VehicleLightStatus) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[7]
}

func (x VehicleLightStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleLightStatus.Descriptor instead.
func (VehicleLightStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

// 车喇叭状态
type SpeakerStatus int32

const (
	//喇叭关
	SpeakerStatus_SPEAKER_CLOSE SpeakerStatus = 0
	//喇叭间断响
	SpeakerStatus_SPEAKER_INTERVAL_SOUND SpeakerStatus = 1
)

// Enum value maps for SpeakerStatus.
var (
	SpeakerStatus_name = map[int32]string{
		0: "SPEAKER_CLOSE",
		1: "SPEAKER_INTERVAL_SOUND",
	}
	SpeakerStatus_value = map[string]int32{
		"SPEAKER_CLOSE":          0,
		"SPEAKER_INTERVAL_SOUND": 1,
	}
)

func (x SpeakerStatus) Enum() *SpeakerStatus {
	p := new(SpeakerStatus)
	*p = x
	return p
}

func (x SpeakerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpeakerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[8].Descriptor()
}

func (SpeakerStatus) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[8]
}

func (x SpeakerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpeakerStatus.Descriptor instead.
func (SpeakerStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8}
}

// 车油路状态
type OilCircuit int32

const (
	//车油路闭合
	OilCircuit_OIL_CIRCUIT_CLOSE OilCircuit = 0
	//车油路断开
	OilCircuit_OIL_CIRCUIT_BREAK OilCircuit = 1
)

// Enum value maps for OilCircuit.
var (
	OilCircuit_name = map[int32]string{
		0: "OIL_CIRCUIT_CLOSE",
		1: "OIL_CIRCUIT_BREAK",
	}
	OilCircuit_value = map[string]int32{
		"OIL_CIRCUIT_CLOSE": 0,
		"OIL_CIRCUIT_BREAK": 1,
	}
)

func (x OilCircuit) Enum() *OilCircuit {
	p := new(OilCircuit)
	*p = x
	return p
}

func (x OilCircuit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OilCircuit) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[9].Descriptor()
}

func (OilCircuit) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[9]
}

func (x OilCircuit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OilCircuit.Descriptor instead.
func (OilCircuit) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{9}
}

//车钥匙状态
type VehicleKey int32

const (
	//车钥匙LOCK
	VehicleKey_KEY_LOCK VehicleKey = 0
	//车钥匙ACC
	VehicleKey_KEY_ACC VehicleKey = 1
	//车钥匙ON
	VehicleKey_KEY_ON VehicleKey = 2
	//车钥匙START
	VehicleKey_KEY_START VehicleKey = 3
)

// Enum value maps for VehicleKey.
var (
	VehicleKey_name = map[int32]string{
		0: "KEY_LOCK",
		1: "KEY_ACC",
		2: "KEY_ON",
		3: "KEY_START",
	}
	VehicleKey_value = map[string]int32{
		"KEY_LOCK":  0,
		"KEY_ACC":   1,
		"KEY_ON":    2,
		"KEY_START": 3,
	}
)

func (x VehicleKey) Enum() *VehicleKey {
	p := new(VehicleKey)
	*p = x
	return p
}

func (x VehicleKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleKey) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[10].Descriptor()
}

func (VehicleKey) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[10]
}

func (x VehicleKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleKey.Descriptor instead.
func (VehicleKey) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10}
}

// 车秘锁状态
type CipherLock int32

const (
	//秘锁关
	CipherLock_CIPHER_LOCK_CLOSE CipherLock = 0
	//秘锁开
	CipherLock_CIPHER_LOCK_OPEN CipherLock = 1
)

// Enum value maps for CipherLock.
var (
	CipherLock_name = map[int32]string{
		0: "CIPHER_LOCK_CLOSE",
		1: "CIPHER_LOCK_OPEN",
	}
	CipherLock_value = map[string]int32{
		"CIPHER_LOCK_CLOSE": 0,
		"CIPHER_LOCK_OPEN":  1,
	}
)

func (x CipherLock) Enum() *CipherLock {
	p := new(CipherLock)
	*p = x
	return p
}

func (x CipherLock) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CipherLock) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[11].Descriptor()
}

func (CipherLock) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[11]
}

func (x CipherLock) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CipherLock.Descriptor instead.
func (CipherLock) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11}
}

// 是否未检测到酒精
type Alcohol int32

const (
	//未检测到酒精
	Alcohol_NOT_DETECTED Alcohol = 0
	//检测到酒精
	Alcohol_DETECTED Alcohol = 1
)

// Enum value maps for Alcohol.
var (
	Alcohol_name = map[int32]string{
		0: "NOT_DETECTED",
		1: "DETECTED",
	}
	Alcohol_value = map[string]int32{
		"NOT_DETECTED": 0,
		"DETECTED":     1,
	}
)

func (x Alcohol) Enum() *Alcohol {
	p := new(Alcohol)
	*p = x
	return p
}

func (x Alcohol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Alcohol) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[12].Descriptor()
}

func (Alcohol) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[12]
}

func (x Alcohol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Alcohol.Descriptor instead.
func (Alcohol) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12}
}

// 时间段
type Period struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 起始时间的UNIX时间戳（包含），单位秒
	StartTime uint32 `protobuf:"fixed32,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// 结束时间的UNIX时间戳（不含），单位秒
	EndTime uint32 `protobuf:"fixed32,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *Period) Reset() {
	*x = Period{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Period) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Period) ProtoMessage() {}

func (x *Period) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Period.ProtoReflect.Descriptor instead.
func (*Period) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

func (x *Period) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Period) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

// 终端当前状态
type TerminalStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 终端id
	TerminalId uint32 `protobuf:"fixed32,1,opt,name=terminal_id,json=terminalId,proto3" json:"terminal_id,omitempty"`
	// gps信号值
	Gps uint32 `protobuf:"varint,2,opt,name=gps,proto3" json:"gps,omitempty"`
	// GPS状态, true:open   false:close
	GpsOpen bool `protobuf:"varint,3,opt,name=gps_open,json=gpsOpen,proto3" json:"gps_open,omitempty"`
	// 定位误差(米)
	Pacc uint32 `protobuf:"varint,4,opt,name=pacc,proto3" json:"pacc,omitempty"`
	// GSM信号强度
	Gsm uint32 `protobuf:"varint,5,opt,name=gsm,proto3" json:"gsm,omitempty"`
	// 电量
	Pbat uint32 `protobuf:"varint,6,opt,name=pbat,proto3" json:"pbat,omitempty"`
	// 温度
	Temp int32 `protobuf:"varint,7,opt,name=temp,proto3" json:"temp,omitempty"`
	// 外接电压
	Voltage uint32 `protobuf:"varint,8,opt,name=voltage,proto3" json:"voltage,omitempty"`
	// 充电状态
	ChargeStatus ChargeStatus `protobuf:"varint,9,opt,name=charge_status,json=chargeStatus,proto3,enum=terminal_message_microservice.ChargeStatus" json:"charge_status,omitempty"`
	// 终端信息更新时间，单位秒
	UpdateTime uint32 `protobuf:"fixed32,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// 其他信息
	ExtraStatus *_struct.Struct `protobuf:"bytes,16,opt,name=extra_status,json=extraStatus,proto3" json:"extra_status,omitempty"`
}

func (x *TerminalStatus) Reset() {
	*x = TerminalStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalStatus) ProtoMessage() {}

func (x *TerminalStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalStatus.ProtoReflect.Descriptor instead.
func (*TerminalStatus) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

func (x *TerminalStatus) GetTerminalId() uint32 {
	if x != nil {
		return x.TerminalId
	}
	return 0
}

func (x *TerminalStatus) GetGps() uint32 {
	if x != nil {
		return x.Gps
	}
	return 0
}

func (x *TerminalStatus) GetGpsOpen() bool {
	if x != nil {
		return x.GpsOpen
	}
	return false
}

func (x *TerminalStatus) GetPacc() uint32 {
	if x != nil {
		return x.Pacc
	}
	return 0
}

func (x *TerminalStatus) GetGsm() uint32 {
	if x != nil {
		return x.Gsm
	}
	return 0
}

func (x *TerminalStatus) GetPbat() uint32 {
	if x != nil {
		return x.Pbat
	}
	return 0
}

func (x *TerminalStatus) GetTemp() int32 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *TerminalStatus) GetVoltage() uint32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *TerminalStatus) GetChargeStatus() ChargeStatus {
	if x != nil {
		return x.ChargeStatus
	}
	return ChargeStatus_DISCHARGE
}

func (x *TerminalStatus) GetUpdateTime() uint32 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *TerminalStatus) GetExtraStatus() *_struct.Struct {
	if x != nil {
		return x.ExtraStatus
	}
	return nil
}

// 终端报文格式
type Packet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 终端id
	TerminalId uint32 `protobuf:"fixed32,1,opt,name=terminal_id,json=terminalId,proto3" json:"terminal_id,omitempty"`
	// 网关接收到报文的时间，时间戳，秒
	ReceiveTime uint32 `protobuf:"fixed32,2,opt,name=receive_time,json=receiveTime,proto3" json:"receive_time,omitempty"`
	// 上报的字段
	Fields []*Field `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Packet) Reset() {
	*x = Packet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

func (x *Packet) GetTerminalId() uint32 {
	if x != nil {
		return x.TerminalId
	}
	return 0
}

func (x *Packet) GetReceiveTime() uint32 {
	if x != nil {
		return x.ReceiveTime
	}
	return 0
}

func (x *Packet) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

// 报文的各个字段
type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Param:
	//	*Field_Iccid
	//	*Field_DataAcquisitionTime
	//	*Field_Sn
	//	*Field_FirmwareVersion
	//	*Field_PhoneNumber
	//	*Field_LoginReason
	//	*Field_Imsi
	//	*Field_ShipId
	//	*Field_WakeupReason
	//	*Field_Pbat
	//	*Field_ChargeStatus
	//	*Field_Gps
	//	*Field_Gsm
	//	*Field_Temp
	//	*Field_Voltage
	//	*Field_GSensor
	//	*Field_ElectricDoorLock
	//	*Field_GpsOpen
	//	*Field_RelayClose
	//	*Field_AlarmType
	//	*Field_Coordinate
	//	*Field_Altitude
	//	*Field_Speed
	//	*Field_Direction
	//	*Field_Pacc
	//	*Field_Moving
	//	*Field_CommunicationStatus_2Dot4G
	//	*Field_PhotosensitiveStatus
	//	*Field_Wifi
	//	*Field_BaseStation
	//	*Field_VehicleData
	//	*Field_AlcoholDetection
	//	*Field_DormantLock
	Param isField_Param `protobuf_oneof:"param"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

func (m *Field) GetParam() isField_Param {
	if m != nil {
		return m.Param
	}
	return nil
}

func (x *Field) GetIccid() string {
	if x, ok := x.GetParam().(*Field_Iccid); ok {
		return x.Iccid
	}
	return ""
}

func (x *Field) GetDataAcquisitionTime() uint32 {
	if x, ok := x.GetParam().(*Field_DataAcquisitionTime); ok {
		return x.DataAcquisitionTime
	}
	return 0
}

func (x *Field) GetSn() string {
	if x, ok := x.GetParam().(*Field_Sn); ok {
		return x.Sn
	}
	return ""
}

func (x *Field) GetFirmwareVersion() string {
	if x, ok := x.GetParam().(*Field_FirmwareVersion); ok {
		return x.FirmwareVersion
	}
	return ""
}

func (x *Field) GetPhoneNumber() string {
	if x, ok := x.GetParam().(*Field_PhoneNumber); ok {
		return x.PhoneNumber
	}
	return ""
}

func (x *Field) GetLoginReason() uint32 {
	if x, ok := x.GetParam().(*Field_LoginReason); ok {
		return x.LoginReason
	}
	return 0
}

func (x *Field) GetImsi() string {
	if x, ok := x.GetParam().(*Field_Imsi); ok {
		return x.Imsi
	}
	return ""
}

func (x *Field) GetShipId() ShipId {
	if x, ok := x.GetParam().(*Field_ShipId); ok {
		return x.ShipId
	}
	return ShipId_ZX6531D
}

func (x *Field) GetWakeupReason() uint32 {
	if x, ok := x.GetParam().(*Field_WakeupReason); ok {
		return x.WakeupReason
	}
	return 0
}

func (x *Field) GetPbat() uint32 {
	if x, ok := x.GetParam().(*Field_Pbat); ok {
		return x.Pbat
	}
	return 0
}

func (x *Field) GetChargeStatus() ChargeStatus {
	if x, ok := x.GetParam().(*Field_ChargeStatus); ok {
		return x.ChargeStatus
	}
	return ChargeStatus_DISCHARGE
}

func (x *Field) GetGps() uint32 {
	if x, ok := x.GetParam().(*Field_Gps); ok {
		return x.Gps
	}
	return 0
}

func (x *Field) GetGsm() uint32 {
	if x, ok := x.GetParam().(*Field_Gsm); ok {
		return x.Gsm
	}
	return 0
}

func (x *Field) GetTemp() int32 {
	if x, ok := x.GetParam().(*Field_Temp); ok {
		return x.Temp
	}
	return 0
}

func (x *Field) GetVoltage() uint32 {
	if x, ok := x.GetParam().(*Field_Voltage); ok {
		return x.Voltage
	}
	return 0
}

func (x *Field) GetGSensor() uint32 {
	if x, ok := x.GetParam().(*Field_GSensor); ok {
		return x.GSensor
	}
	return 0
}

func (x *Field) GetElectricDoorLock() *ElectricDoorLock {
	if x, ok := x.GetParam().(*Field_ElectricDoorLock); ok {
		return x.ElectricDoorLock
	}
	return nil
}

func (x *Field) GetGpsOpen() bool {
	if x, ok := x.GetParam().(*Field_GpsOpen); ok {
		return x.GpsOpen
	}
	return false
}

func (x *Field) GetRelayClose() bool {
	if x, ok := x.GetParam().(*Field_RelayClose); ok {
		return x.RelayClose
	}
	return false
}

func (x *Field) GetAlarmType() AlarmType {
	if x, ok := x.GetParam().(*Field_AlarmType); ok {
		return x.AlarmType
	}
	return AlarmType_LOCATION_UPDATE
}

func (x *Field) GetCoordinate() *Coordinate {
	if x, ok := x.GetParam().(*Field_Coordinate); ok {
		return x.Coordinate
	}
	return nil
}

func (x *Field) GetAltitude() uint32 {
	if x, ok := x.GetParam().(*Field_Altitude); ok {
		return x.Altitude
	}
	return 0
}

func (x *Field) GetSpeed() float32 {
	if x, ok := x.GetParam().(*Field_Speed); ok {
		return x.Speed
	}
	return 0
}

func (x *Field) GetDirection() uint32 {
	if x, ok := x.GetParam().(*Field_Direction); ok {
		return x.Direction
	}
	return 0
}

func (x *Field) GetPacc() uint32 {
	if x, ok := x.GetParam().(*Field_Pacc); ok {
		return x.Pacc
	}
	return 0
}

func (x *Field) GetMoving() bool {
	if x, ok := x.GetParam().(*Field_Moving); ok {
		return x.Moving
	}
	return false
}

func (x *Field) GetCommunicationStatus_2Dot4G() CommunicationStatus2Dot4G {
	if x, ok := x.GetParam().(*Field_CommunicationStatus_2Dot4G); ok {
		return x.CommunicationStatus_2Dot4G
	}
	return CommunicationStatus2Dot4G_COMMUNICATION_CLOSE
}

func (x *Field) GetPhotosensitiveStatus() PhotosensitiveStatus {
	if x, ok := x.GetParam().(*Field_PhotosensitiveStatus); ok {
		return x.PhotosensitiveStatus
	}
	return PhotosensitiveStatus_PHOTOSENSITIVE_CLOSE
}

func (x *Field) GetWifi() *WiFi {
	if x, ok := x.GetParam().(*Field_Wifi); ok {
		return x.Wifi
	}
	return nil
}

func (x *Field) GetBaseStation() *BaseStation {
	if x, ok := x.GetParam().(*Field_BaseStation); ok {
		return x.BaseStation
	}
	return nil
}

func (x *Field) GetVehicleData() *VehicleData {
	if x, ok := x.GetParam().(*Field_VehicleData); ok {
		return x.VehicleData
	}
	return nil
}

func (x *Field) GetAlcoholDetection() *AlcoholDetection {
	if x, ok := x.GetParam().(*Field_AlcoholDetection); ok {
		return x.AlcoholDetection
	}
	return nil
}

func (x *Field) GetDormantLock() *DormantLock {
	if x, ok := x.GetParam().(*Field_DormantLock); ok {
		return x.DormantLock
	}
	return nil
}

type isField_Param interface {
	isField_Param()
}

type Field_Iccid struct {
	// iccid
	Iccid string `protobuf:"bytes,1,opt,name=iccid,proto3,oneof"`
}

type Field_DataAcquisitionTime struct {
	// 数据采集时间
	DataAcquisitionTime uint32 `protobuf:"fixed32,2,opt,name=data_acquisition_time,json=dataAcquisitionTime,proto3,oneof"`
}

type Field_Sn struct {
	// 设备sn
	Sn string `protobuf:"bytes,3,opt,name=sn,proto3,oneof"`
}

type Field_FirmwareVersion struct {
	// 固件版本号
	FirmwareVersion string `protobuf:"bytes,4,opt,name=firmware_version,json=firmwareVersion,proto3,oneof"`
}

type Field_PhoneNumber struct {
	// 手机号
	PhoneNumber string `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3,oneof"`
}

type Field_LoginReason struct {
	// 终端登录原因
	LoginReason uint32 `protobuf:"varint,6,opt,name=login_reason,json=loginReason,proto3,oneof"`
}

type Field_Imsi struct {
	// sim卡国际移动用户识别码
	Imsi string `protobuf:"bytes,7,opt,name=imsi,proto3,oneof"`
}

type Field_ShipId struct {
	// 终端上主芯片的ID
	ShipId ShipId `protobuf:"varint,8,opt,name=ship_id,json=shipId,proto3,enum=terminal_message_microservice.ShipId,oneof"`
}

type Field_WakeupReason struct {
	// 单片机最近唤起终端原因
	WakeupReason uint32 `protobuf:"varint,9,opt,name=wakeup_reason,json=wakeupReason,proto3,oneof"`
}

type Field_Pbat struct {
	// 电量,0%到100%
	Pbat uint32 `protobuf:"varint,10,opt,name=pbat,proto3,oneof"`
}

type Field_ChargeStatus struct {
	// 充电状态
	ChargeStatus ChargeStatus `protobuf:"varint,11,opt,name=charge_status,json=chargeStatus,proto3,enum=terminal_message_microservice.ChargeStatus,oneof"`
}

type Field_Gps struct {
	// 最近一次GPS解算时所用到的信号最强的四颗卫星的接收载噪比的平均值，精确到1Db
	Gps uint32 `protobuf:"varint,12,opt,name=gps,proto3,oneof"`
}

type Field_Gsm struct {
	// GSM 信号强度
	Gsm uint32 `protobuf:"varint,13,opt,name=gsm,proto3,oneof"`
}

type Field_Temp struct {
	//GPS解算成功时测量到的温度, -128 ~ 127°C
	Temp int32 `protobuf:"varint,14,opt,name=temp,proto3,oneof"`
}

type Field_Voltage struct {
	// 外接电压,取值范围：0~65535
	Voltage uint32 `protobuf:"varint,15,opt,name=voltage,proto3,oneof"`
}

type Field_GSensor struct {
	// GSensor.实际采集到的加速度传感器x\y\z三轴之和
	GSensor uint32 `protobuf:"varint,16,opt,name=g_sensor,json=gSensor,proto3,oneof"`
}

type Field_ElectricDoorLock struct {
	// 电门锁状态
	ElectricDoorLock *ElectricDoorLock `protobuf:"bytes,17,opt,name=electric_door_lock,json=electricDoorLock,proto3,oneof"`
}

type Field_GpsOpen struct {
	// GPS状态, true:open   false:close
	GpsOpen bool `protobuf:"varint,18,opt,name=gps_open,json=gpsOpen,proto3,oneof"`
}

type Field_RelayClose struct {
	// true:继电器闭合  false: 继电器断开
	RelayClose bool `protobuf:"varint,19,opt,name=relay_close,json=relayClose,proto3,oneof"`
}

type Field_AlarmType struct {
	// 告警类型
	AlarmType AlarmType `protobuf:"varint,20,opt,name=alarm_type,json=alarmType,proto3,enum=terminal_message_microservice.AlarmType,oneof"`
}

type Field_Coordinate struct {
	// 位置信息，经纬度信息
	Coordinate *Coordinate `protobuf:"bytes,21,opt,name=coordinate,proto3,oneof"`
}

type Field_Altitude struct {
	// 海拔高度，单位米
	Altitude uint32 `protobuf:"varint,22,opt,name=altitude,proto3,oneof"`
}

type Field_Speed struct {
	// 速度，单位m/s。gps采集到的速度
	Speed float32 `protobuf:"fixed32,23,opt,name=speed,proto3,oneof"`
}

type Field_Direction struct {
	// 方向，0-359，单位为度，正北为0，顺时针
	Direction uint32 `protobuf:"varint,24,opt,name=direction,proto3,oneof"`
}

type Field_Pacc struct {
	// GPS芯片估测的位置解算误差，精确到米
	Pacc uint32 `protobuf:"varint,25,opt,name=pacc,proto3,oneof"`
}

type Field_Moving struct {
	// 移动或者停留, true=移动, false=停留
	Moving bool `protobuf:"varint,26,opt,name=moving,proto3,oneof"`
}

type Field_CommunicationStatus_2Dot4G struct {
	//  2.4G通讯状态
	CommunicationStatus_2Dot4G CommunicationStatus2Dot4G `protobuf:"varint,27,opt,name=communication_status_2dot4g,json=communicationStatus2dot4g,proto3,enum=terminal_message_microservice.CommunicationStatus2Dot4G,oneof"`
}

type Field_PhotosensitiveStatus struct {
	// 感光状态
	PhotosensitiveStatus PhotosensitiveStatus `protobuf:"varint,28,opt,name=photosensitive_status,json=photosensitiveStatus,proto3,enum=terminal_message_microservice.PhotosensitiveStatus,oneof"`
}

type Field_Wifi struct {
	// wifi信息
	Wifi *WiFi `protobuf:"bytes,29,opt,name=wifi,proto3,oneof"`
}

type Field_BaseStation struct {
	// 基站信息
	BaseStation *BaseStation `protobuf:"bytes,30,opt,name=base_station,json=baseStation,proto3,oneof"`
}

type Field_VehicleData struct {
	// 车辆信息
	VehicleData *VehicleData `protobuf:"bytes,31,opt,name=vehicle_data,json=vehicleData,proto3,oneof"`
}

type Field_AlcoholDetection struct {
	// 酒精检测
	AlcoholDetection *AlcoholDetection `protobuf:"bytes,32,opt,name=alcohol_detection,json=alcoholDetection,proto3,oneof"`
}

type Field_DormantLock struct {
	// 暗锁
	DormantLock *DormantLock `protobuf:"bytes,33,opt,name=dormant_lock,json=dormantLock,proto3,oneof"`
}

func (*Field_Iccid) isField_Param() {}

func (*Field_DataAcquisitionTime) isField_Param() {}

func (*Field_Sn) isField_Param() {}

func (*Field_FirmwareVersion) isField_Param() {}

func (*Field_PhoneNumber) isField_Param() {}

func (*Field_LoginReason) isField_Param() {}

func (*Field_Imsi) isField_Param() {}

func (*Field_ShipId) isField_Param() {}

func (*Field_WakeupReason) isField_Param() {}

func (*Field_Pbat) isField_Param() {}

func (*Field_ChargeStatus) isField_Param() {}

func (*Field_Gps) isField_Param() {}

func (*Field_Gsm) isField_Param() {}

func (*Field_Temp) isField_Param() {}

func (*Field_Voltage) isField_Param() {}

func (*Field_GSensor) isField_Param() {}

func (*Field_ElectricDoorLock) isField_Param() {}

func (*Field_GpsOpen) isField_Param() {}

func (*Field_RelayClose) isField_Param() {}

func (*Field_AlarmType) isField_Param() {}

func (*Field_Coordinate) isField_Param() {}

func (*Field_Altitude) isField_Param() {}

func (*Field_Speed) isField_Param() {}

func (*Field_Direction) isField_Param() {}

func (*Field_Pacc) isField_Param() {}

func (*Field_Moving) isField_Param() {}

func (*Field_CommunicationStatus_2Dot4G) isField_Param() {}

func (*Field_PhotosensitiveStatus) isField_Param() {}

func (*Field_Wifi) isField_Param() {}

func (*Field_BaseStation) isField_Param() {}

func (*Field_VehicleData) isField_Param() {}

func (*Field_AlcoholDetection) isField_Param() {}

func (*Field_DormantLock) isField_Param() {}

// 电门锁状态
type ElectricDoorLock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//电门锁状态
	Acc uint32 `protobuf:"varint,1,opt,name=acc,proto3" json:"acc,omitempty"`
	//设置锁车状态
	Sl uint32 `protobuf:"varint,2,opt,name=sl,proto3" json:"sl,omitempty"`
	// 实际锁车状态
	Rl uint32 `protobuf:"varint,3,opt,name=rl,proto3" json:"rl,omitempty"`
	// 自检结果
	Ce uint32 `protobuf:"varint,4,opt,name=ce,proto3" json:"ce,omitempty"`
}

func (x *ElectricDoorLock) Reset() {
	*x = ElectricDoorLock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectricDoorLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectricDoorLock) ProtoMessage() {}

func (x *ElectricDoorLock) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectricDoorLock.ProtoReflect.Descriptor instead.
func (*ElectricDoorLock) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

func (x *ElectricDoorLock) GetAcc() uint32 {
	if x != nil {
		return x.Acc
	}
	return 0
}

func (x *ElectricDoorLock) GetSl() uint32 {
	if x != nil {
		return x.Sl
	}
	return 0
}

func (x *ElectricDoorLock) GetRl() uint32 {
	if x != nil {
		return x.Rl
	}
	return 0
}

func (x *ElectricDoorLock) GetCe() uint32 {
	if x != nil {
		return x.Ce
	}
	return 0
}

// 坐标
type Coordinate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 经度，东经为正数，西经为负数
	Longitude float64 `protobuf:"fixed64,1,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// 纬度，北纬为正数，南纬为负数
	Latitude float64 `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
}

func (x *Coordinate) Reset() {
	*x = Coordinate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coordinate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coordinate) ProtoMessage() {}

func (x *Coordinate) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coordinate.ProtoReflect.Descriptor instead.
func (*Coordinate) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

func (x *Coordinate) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Coordinate) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

// wifi信息
type WiFi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// wifi的模式
	WifiMode WiFiMode `protobuf:"varint,1,opt,name=wifi_mode,json=wifiMode,proto3,enum=terminal_message_microservice.WiFiMode" json:"wifi_mode,omitempty"`
	// 可见AP信息
	Aps []*APInfo `protobuf:"bytes,2,rep,name=aps,proto3" json:"aps,omitempty"`
}

func (x *WiFi) Reset() {
	*x = WiFi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WiFi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WiFi) ProtoMessage() {}

func (x *WiFi) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WiFi.ProtoReflect.Descriptor instead.
func (*WiFi) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

func (x *WiFi) GetWifiMode() WiFiMode {
	if x != nil {
		return x.WifiMode
	}
	return WiFiMode_STATION
}

func (x *WiFi) GetAps() []*APInfo {
	if x != nil {
		return x.Aps
	}
	return nil
}

// wifi的AP信息
type APInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 信号强度, 信号强度本身为负值，上报使用的是绝对值，取值范围0-127
	Rssi uint32 `protobuf:"varint,1,opt,name=rssi,proto3" json:"rssi,omitempty"`
	// mac地址
	Mac string `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (x *APInfo) Reset() {
	*x = APInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APInfo) ProtoMessage() {}

func (x *APInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APInfo.ProtoReflect.Descriptor instead.
func (*APInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

func (x *APInfo) GetRssi() uint32 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *APInfo) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

// 基站信息
type BaseStation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 基站蜂窝信息
	Cells []*Cell `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells,omitempty"`
}

func (x *BaseStation) Reset() {
	*x = BaseStation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseStation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseStation) ProtoMessage() {}

func (x *BaseStation) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseStation.ProtoReflect.Descriptor instead.
func (*BaseStation) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8}
}

func (x *BaseStation) GetCells() []*Cell {
	if x != nil {
		return x.Cells
	}
	return nil
}

// 基站蜂窝信息
type Cell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mcc    uint32 `protobuf:"varint,1,opt,name=mcc,proto3" json:"mcc,omitempty"`
	Mnc    uint32 `protobuf:"varint,2,opt,name=mnc,proto3" json:"mnc,omitempty"`
	Lac    uint32 `protobuf:"varint,3,opt,name=lac,proto3" json:"lac,omitempty"`
	CellId uint32 `protobuf:"varint,4,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	Rxlev  uint32 `protobuf:"varint,5,opt,name=rxlev,proto3" json:"rxlev,omitempty"`
}

func (x *Cell) Reset() {
	*x = Cell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cell) ProtoMessage() {}

func (x *Cell) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cell.ProtoReflect.Descriptor instead.
func (*Cell) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{9}
}

func (x *Cell) GetMcc() uint32 {
	if x != nil {
		return x.Mcc
	}
	return 0
}

func (x *Cell) GetMnc() uint32 {
	if x != nil {
		return x.Mnc
	}
	return 0
}

func (x *Cell) GetLac() uint32 {
	if x != nil {
		return x.Lac
	}
	return 0
}

func (x *Cell) GetCellId() uint32 {
	if x != nil {
		return x.CellId
	}
	return 0
}

func (x *Cell) GetRxlev() uint32 {
	if x != nil {
		return x.Rxlev
	}
	return 0
}

// CAN信息上报
type VehicleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 车辆发动机状态
	EngineStatus VehicleEngineStatus `protobuf:"varint,1,opt,name=engine_status,json=engineStatus,proto3,enum=terminal_message_microservice.VehicleEngineStatus" json:"engine_status,omitempty"`
	// 车辆清除错误码后里程
	Mileage uint32 `protobuf:"varint,2,opt,name=mileage,proto3" json:"mileage,omitempty"`
	// 总里程，单位公里
	TotalMileage uint32 `protobuf:"varint,3,opt,name=total_mileage,json=totalMileage,proto3" json:"total_mileage,omitempty"`
	// 续航里程，单位公里
	Endurance uint32 `protobuf:"varint,4,opt,name=endurance,proto3" json:"endurance,omitempty"`
	// 驾驶侧前门, true=开，false=关
	DriverFrontDoorOpen bool `protobuf:"varint,5,opt,name=driver_front_door_open,json=driverFrontDoorOpen,proto3" json:"driver_front_door_open,omitempty"`
	// 副驾驶前门
	CopilotFrontDoorOpen bool `protobuf:"varint,6,opt,name=copilot_front_door_open,json=copilotFrontDoorOpen,proto3" json:"copilot_front_door_open,omitempty"`
	// 驾驶侧后门
	DriverBackDoorOpen bool `protobuf:"varint,7,opt,name=driver_back_door_open,json=driverBackDoorOpen,proto3" json:"driver_back_door_open,omitempty"`
	// 副驾驶后门
	CopilotBackDoorOpen bool `protobuf:"varint,8,opt,name=copilot_back_door_open,json=copilotBackDoorOpen,proto3" json:"copilot_back_door_open,omitempty"`
	// 门锁状态
	DoorLock bool `protobuf:"varint,9,opt,name=door_lock,json=doorLock,proto3" json:"door_lock,omitempty"`
	// 车灯状态
	Light VehicleLightStatus `protobuf:"varint,10,opt,name=light,proto3,enum=terminal_message_microservice.VehicleLightStatus" json:"light,omitempty"`
	// 车喇叭状态
	Speaker SpeakerStatus `protobuf:"varint,11,opt,name=speaker,proto3,enum=terminal_message_microservice.SpeakerStatus" json:"speaker,omitempty"`
	// 车油路状态
	OilCircuit OilCircuit `protobuf:"varint,12,opt,name=oil_circuit,json=oilCircuit,proto3,enum=terminal_message_microservice.OilCircuit" json:"oil_circuit,omitempty"`
	// 车钥匙状态
	Key VehicleKey `protobuf:"varint,13,opt,name=key,proto3,enum=terminal_message_microservice.VehicleKey" json:"key,omitempty"`
	// 车油量状态;油量百分比,0 ~ 100%
	FuelPercent uint32 `protobuf:"varint,14,opt,name=fuel_percent,json=fuelPercent,proto3" json:"fuel_percent,omitempty"`
	// 车秘锁状态
	CipherLock CipherLock `protobuf:"varint,15,opt,name=cipher_lock,json=cipherLock,proto3,enum=terminal_message_microservice.CipherLock" json:"cipher_lock,omitempty"`
	// 车牌号
	PlateNumber string `protobuf:"bytes,16,opt,name=plate_number,json=plateNumber,proto3" json:"plate_number,omitempty"`
}

func (x *VehicleData) Reset() {
	*x = VehicleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleData) ProtoMessage() {}

func (x *VehicleData) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleData.ProtoReflect.Descriptor instead.
func (*VehicleData) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10}
}

func (x *VehicleData) GetEngineStatus() VehicleEngineStatus {
	if x != nil {
		return x.EngineStatus
	}
	return VehicleEngineStatus_NOT_SUPPORTED
}

func (x *VehicleData) GetMileage() uint32 {
	if x != nil {
		return x.Mileage
	}
	return 0
}

func (x *VehicleData) GetTotalMileage() uint32 {
	if x != nil {
		return x.TotalMileage
	}
	return 0
}

func (x *VehicleData) GetEndurance() uint32 {
	if x != nil {
		return x.Endurance
	}
	return 0
}

func (x *VehicleData) GetDriverFrontDoorOpen() bool {
	if x != nil {
		return x.DriverFrontDoorOpen
	}
	return false
}

func (x *VehicleData) GetCopilotFrontDoorOpen() bool {
	if x != nil {
		return x.CopilotFrontDoorOpen
	}
	return false
}

func (x *VehicleData) GetDriverBackDoorOpen() bool {
	if x != nil {
		return x.DriverBackDoorOpen
	}
	return false
}

func (x *VehicleData) GetCopilotBackDoorOpen() bool {
	if x != nil {
		return x.CopilotBackDoorOpen
	}
	return false
}

func (x *VehicleData) GetDoorLock() bool {
	if x != nil {
		return x.DoorLock
	}
	return false
}

func (x *VehicleData) GetLight() VehicleLightStatus {
	if x != nil {
		return x.Light
	}
	return VehicleLightStatus_LIGHT_CLOSE
}

func (x *VehicleData) GetSpeaker() SpeakerStatus {
	if x != nil {
		return x.Speaker
	}
	return SpeakerStatus_SPEAKER_CLOSE
}

func (x *VehicleData) GetOilCircuit() OilCircuit {
	if x != nil {
		return x.OilCircuit
	}
	return OilCircuit_OIL_CIRCUIT_CLOSE
}

func (x *VehicleData) GetKey() VehicleKey {
	if x != nil {
		return x.Key
	}
	return VehicleKey_KEY_LOCK
}

func (x *VehicleData) GetFuelPercent() uint32 {
	if x != nil {
		return x.FuelPercent
	}
	return 0
}

func (x *VehicleData) GetCipherLock() CipherLock {
	if x != nil {
		return x.CipherLock
	}
	return CipherLock_CIPHER_LOCK_CLOSE
}

func (x *VehicleData) GetPlateNumber() string {
	if x != nil {
		return x.PlateNumber
	}
	return ""
}

// 酒精检测
type AlcoholDetection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否未检测到酒精
	Alcohol Alcohol `protobuf:"varint,1,opt,name=alcohol,proto3,enum=terminal_message_microservice.Alcohol" json:"alcohol,omitempty"`
	// 酒精浓度，单位mv
	Concentration uint32 `protobuf:"varint,2,opt,name=concentration,proto3" json:"concentration,omitempty"`
}

func (x *AlcoholDetection) Reset() {
	*x = AlcoholDetection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlcoholDetection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlcoholDetection) ProtoMessage() {}

func (x *AlcoholDetection) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlcoholDetection.ProtoReflect.Descriptor instead.
func (*AlcoholDetection) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11}
}

func (x *AlcoholDetection) GetAlcohol() Alcohol {
	if x != nil {
		return x.Alcohol
	}
	return Alcohol_NOT_DETECTED
}

func (x *AlcoholDetection) GetConcentration() uint32 {
	if x != nil {
		return x.Concentration
	}
	return 0
}

// 暗锁443
type DormantLock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 暗锁开关，0=关闭，1=打开
	Switch uint32 `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	// 暗锁id
	Id uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// 暗锁模式，0=供油，1=安全断油，2=强制断油
	Mode uint32 `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
	// 丢包率，0-100%
	Lost uint32 `protobuf:"varint,4,opt,name=lost,proto3" json:"lost,omitempty"`
	// 信号强度, 信号强度本身为负值，上报使用的是绝对值，取值范围0-127
	Rssi uint32 `protobuf:"varint,5,opt,name=rssi,proto3" json:"rssi,omitempty"`
	// 暗锁温度,-128 ~ 127°C
	Temp int32 `protobuf:"varint,6,opt,name=temp,proto3" json:"temp,omitempty"`
}

func (x *DormantLock) Reset() {
	*x = DormantLock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DormantLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DormantLock) ProtoMessage() {}

func (x *DormantLock) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DormantLock.ProtoReflect.Descriptor instead.
func (*DormantLock) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12}
}

func (x *DormantLock) GetSwitch() uint32 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *DormantLock) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DormantLock) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *DormantLock) GetLost() uint32 {
	if x != nil {
		return x.Lost
	}
	return 0
}

func (x *DormantLock) GetRssi() uint32 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *DormantLock) GetTemp() int32 {
	if x != nil {
		return x.Temp
	}
	return 0
}

// 温度信息
type Temperatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 温度
	Temperature int32 `protobuf:"varint,1,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// 数据采集时间
	DataAcquisitionTime uint32 `protobuf:"varint,2,opt,name=DataAcquisitionTime,proto3" json:"DataAcquisitionTime,omitempty"`
}

func (x *Temperatures) Reset() {
	*x = Temperatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Temperatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Temperatures) ProtoMessage() {}

func (x *Temperatures) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Temperatures.ProtoReflect.Descriptor instead.
func (*Temperatures) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{13}
}

func (x *Temperatures) GetTemperature() int32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *Temperatures) GetDataAcquisitionTime() uint32 {
	if x != nil {
		return x.DataAcquisitionTime
	}
	return 0
}

type GetTerminalStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TerminalId uint32 `protobuf:"fixed32,1,opt,name=terminal_id,json=terminalId,proto3" json:"terminal_id,omitempty"`
}

func (x *GetTerminalStatusRequest) Reset() {
	*x = GetTerminalStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTerminalStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTerminalStatusRequest) ProtoMessage() {}

func (x *GetTerminalStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTerminalStatusRequest.ProtoReflect.Descriptor instead.
func (*GetTerminalStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{14}
}

func (x *GetTerminalStatusRequest) GetTerminalId() uint32 {
	if x != nil {
		return x.TerminalId
	}
	return 0
}

type GetTerminalStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 终端状态
	TerminalStatus *TerminalStatus `protobuf:"bytes,1,opt,name=terminal_status,json=terminalStatus,proto3" json:"terminal_status,omitempty"`
}

func (x *GetTerminalStatusResponse) Reset() {
	*x = GetTerminalStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTerminalStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTerminalStatusResponse) ProtoMessage() {}

func (x *GetTerminalStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTerminalStatusResponse.ProtoReflect.Descriptor instead.
func (*GetTerminalStatusResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{15}
}

func (x *GetTerminalStatusResponse) GetTerminalStatus() *TerminalStatus {
	if x != nil {
		return x.TerminalStatus
	}
	return nil
}

type GetTerminalTemperaturesInPeriodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 终端ID
	TerminalId uint32 `protobuf:"fixed32,1,opt,name=terminal_id,json=terminalId,proto3" json:"terminal_id,omitempty"`
	// 时间段
	Period *Period `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *GetTerminalTemperaturesInPeriodRequest) Reset() {
	*x = GetTerminalTemperaturesInPeriodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTerminalTemperaturesInPeriodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTerminalTemperaturesInPeriodRequest) ProtoMessage() {}

func (x *GetTerminalTemperaturesInPeriodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTerminalTemperaturesInPeriodRequest.ProtoReflect.Descriptor instead.
func (*GetTerminalTemperaturesInPeriodRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{16}
}

func (x *GetTerminalTemperaturesInPeriodRequest) GetTerminalId() uint32 {
	if x != nil {
		return x.TerminalId
	}
	return 0
}

func (x *GetTerminalTemperaturesInPeriodRequest) GetPeriod() *Period {
	if x != nil {
		return x.Period
	}
	return nil
}

type GetTerminalTemperaturesInPeriodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 一段时间内的终端状态
	Temps []*Temperatures `protobuf:"bytes,1,rep,name=temps,proto3" json:"temps,omitempty"`
}

func (x *GetTerminalTemperaturesInPeriodResponse) Reset() {
	*x = GetTerminalTemperaturesInPeriodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTerminalTemperaturesInPeriodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTerminalTemperaturesInPeriodResponse) ProtoMessage() {}

func (x *GetTerminalTemperaturesInPeriodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTerminalTemperaturesInPeriodResponse.ProtoReflect.Descriptor instead.
func (*GetTerminalTemperaturesInPeriodResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{17}
}

func (x *GetTerminalTemperaturesInPeriodResponse) GetTemps() []*Temperatures {
	if x != nil {
		return x.Temps
	}
	return nil
}

var File_api_proto protoreflect.FileDescriptor

var file_api_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x42, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf5, 0x02, 0x0a,
	0x0e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x67,
	0x70, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x70, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x67, 0x70, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x63, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x63,
	0x63, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x73, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x67, 0x73, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x62, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x62, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x22, 0xfc, 0x0c, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x69,
	0x63, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x69, 0x63,
	0x63, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x07, 0x48, 0x00, 0x52, 0x13, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x73, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x2b, 0x0a, 0x10, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x68, 0x69, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x49, 0x64,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x77, 0x61,
	0x6b, 0x65, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x0c, 0x77, 0x61, 0x6b, 0x65, 0x75, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x62, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x04, 0x70, 0x62, 0x61, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x03, 0x67,
	0x70, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x03, 0x67, 0x70, 0x73, 0x12,
	0x12, 0x0a, 0x03, 0x67, 0x73, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x03,
	0x67, 0x73, 0x6d, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x07, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x67, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x67, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x12, 0x5f, 0x0a, 0x12, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x64,
	0x6f, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x44, 0x6f, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x48,
	0x00, 0x52, 0x10, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x44, 0x6f, 0x6f, 0x72, 0x4c,
	0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x08, 0x67, 0x70, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x67, 0x70, 0x73, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x21, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b,
	0x0a, 0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x61,
	0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x12, 0x1e, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x61, 0x63, 0x63, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x04, 0x70, 0x61, 0x63, 0x63, 0x12, 0x18, 0x0a, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x6e,
	0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x6e,
	0x67, 0x12, 0x7a, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x32, 0x64, 0x6f, 0x74, 0x34, 0x67,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x64, 0x6f, 0x74, 0x34, 0x67,
	0x48, 0x00, 0x52, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x64, 0x6f, 0x74, 0x34, 0x67, 0x12, 0x6a, 0x0a,
	0x15, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x48, 0x00, 0x52, 0x14, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x77, 0x69, 0x66,
	0x69, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x46, 0x69, 0x48, 0x00, 0x52, 0x04,
	0x77, 0x69, 0x66, 0x69, 0x12, 0x4f, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0c, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5e, 0x0a, 0x11, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f,
	0x6c, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0c, 0x64, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x22, 0x54, 0x0a, 0x10, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x44, 0x6f, 0x6f, 0x72,
	0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x61, 0x63, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x73, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x63, 0x65, 0x22, 0x46, 0x0a, 0x0a, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x85,
	0x01, 0x0a, 0x04, 0x57, 0x69, 0x46, 0x69, 0x12, 0x44, 0x0a, 0x09, 0x77, 0x69, 0x66, 0x69, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x46, 0x69, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x77, 0x69, 0x66, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a,
	0x03, 0x61, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x50, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x03, 0x61, 0x70, 0x73, 0x22, 0x2e, 0x0a, 0x06, 0x41, 0x50, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x72, 0x73, 0x73, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x22, 0x48, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73,
	0x22, 0x6b, 0x0a, 0x04, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x63, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x63, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6e,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x6e, 0x63, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x61, 0x63, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x78, 0x6c, 0x65, 0x76,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x78, 0x6c, 0x65, 0x76, 0x22, 0xe0, 0x06,
	0x0a, 0x0b, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a,
	0x0d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6c, 0x65, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x69, 0x6c, 0x65, 0x61, 0x67, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x69,
	0x6c, 0x65, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x75, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6e, 0x74,
	0x44, 0x6f, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x6f, 0x70, 0x69,
	0x6c, 0x6f, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x6f, 0x72, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x6f, 0x70, 0x69, 0x6c,
	0x6f, 0x74, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x44, 0x6f, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x12,
	0x31, 0x0a, 0x15, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64,
	0x6f, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x6f, 0x72, 0x4f, 0x70,
	0x65, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x64, 0x6f, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x63, 0x6f, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x44,
	0x6f, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6f, 0x72, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x6f, 0x6f, 0x72,
	0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x47, 0x0a, 0x05, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x46, 0x0a,
	0x07, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c,
	0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x73, 0x70,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0b, 0x6f, 0x69, 0x6c, 0x5f, 0x63, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x69, 0x6c, 0x43, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x52, 0x0a, 0x6f, 0x69, 0x6c, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x12, 0x3b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x66, 0x75, 0x65, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x75, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x63,
	0x6b, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x7a, 0x0a, 0x10, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x07, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x52, 0x07, 0x61,
	0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x01, 0x0a,
	0x0b, 0x44, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x73, 0x73, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x65, 0x6d, 0x70, 0x22, 0x62, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63,
	0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x26, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x6c, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x49, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x05, 0x74, 0x65,
	0x6d, 0x70, 0x73, 0x2a, 0x47, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x53, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x55, 0x54, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x02, 0x2a, 0x23, 0x0a, 0x06,
	0x53, 0x68, 0x69, 0x70, 0x49, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x5a, 0x58, 0x36, 0x35, 0x33, 0x31,
	0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x5a, 0x58, 0x36, 0x35, 0x33, 0x31, 0x44, 0x41, 0x10,
	0x01, 0x2a, 0x93, 0x06, 0x0a, 0x09, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x49, 0x53, 0x54, 0x55, 0x52, 0x42, 0x41,
	0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59,
	0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52,
	0x59, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4f, 0x53, 0x10,
	0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x05, 0x12, 0x16, 0x0a,
	0x12, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x07,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x41, 0x50, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x4c, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x41, 0x52, 0x53,
	0x48, 0x5f, 0x42, 0x52, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x41,
	0x43, 0x43, 0x5f, 0x41, 0x42, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x0a, 0x12, 0x0d, 0x0a,
	0x09, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a,
	0x4f, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f,
	0x46, 0x41, 0x54, 0x49, 0x47, 0x55, 0x45, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x49, 0x4e, 0x47, 0x10,
	0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x14, 0x0a,
	0x10, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x4e,
	0x53, 0x53, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x11, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x45,
	0x52, 0x4d, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x56, 0x4f, 0x4c,
	0x54, 0x41, 0x47, 0x45, 0x10, 0x12, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e,
	0x41, 0x4c, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x13, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x49, 0x53,
	0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4d, 0x41, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x14, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x54, 0x53, 0x5f, 0x4d, 0x41, 0x4c, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x15, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x4d, 0x45, 0x52,
	0x41, 0x5f, 0x4d, 0x41, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x16, 0x12,
	0x12, 0x0a, 0x0e, 0x49, 0x43, 0x5f, 0x4d, 0x41, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x17, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x57, 0x41, 0x52,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x41, 0x54, 0x49, 0x47, 0x55,
	0x45, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x19, 0x12, 0x14, 0x0a, 0x10, 0x4f,
	0x56, 0x45, 0x52, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x49, 0x4e, 0x47, 0x10,
	0x1a, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x56, 0x45, 0x52, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x41,
	0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x1b, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x1c, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x1d, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4f,
	0x41, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x1e, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1f, 0x12, 0x13,
	0x0a, 0x0f, 0x56, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x20, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x42, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f,
	0x4f, 0x49, 0x4c, 0x10, 0x21, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45,
	0x5f, 0x53, 0x54, 0x4f, 0x4c, 0x45, 0x4e, 0x10, 0x22, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x42, 0x4e,
	0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x49, 0x47, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x23,
	0x12, 0x15, 0x0a, 0x11, 0x41, 0x42, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x4d, 0x4f, 0x56,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x24, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4c, 0x4c, 0x49,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x25, 0x12, 0x14,
	0x0a, 0x10, 0x52, 0x4f, 0x4c, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x26, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x42, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
	0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x27, 0x2a, 0x6a, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x64,
	0x6f, 0x74, 0x34, 0x67, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e,
	0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x4d, 0x55,
	0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x42, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
	0x4c, 0x10, 0x02, 0x2a, 0x49, 0x0a, 0x14, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x48, 0x4f, 0x54, 0x4f, 0x53, 0x45, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x49, 0x47, 0x48,
	0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x2a, 0x1f,
	0x0a, 0x08, 0x57, 0x69, 0x46, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x50, 0x10, 0x01, 0x2a,
	0x4f, 0x0a, 0x13, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x47,
	0x49, 0x4e, 0x45, 0x5f, 0x49, 0x47, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x10, 0x02,
	0x2a, 0x39, 0x0a, 0x12, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x47, 0x48, 0x54,
	0x5f, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x2a, 0x3e, 0x0a, 0x0d, 0x53,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x50, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x56, 0x41, 0x4c, 0x5f, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x2a, 0x3a, 0x0a, 0x0a, 0x4f,
	0x69, 0x6c, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x49, 0x4c,
	0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x4f, 0x49, 0x4c, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f,
	0x42, 0x52, 0x45, 0x41, 0x4b, 0x10, 0x01, 0x2a, 0x42, 0x0a, 0x0a, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x4f, 0x43,
	0x4b, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x45, 0x59, 0x5f, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x4b, 0x45, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x03, 0x2a, 0x39, 0x0a, 0x0a, 0x43,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x49, 0x50,
	0x48, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x2a, 0x29, 0x0a, 0x07, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f,
	0x6c, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x32, 0xd4, 0x02, 0x0a, 0x16, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x86, 0x01, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x37, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb0, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x49, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x45, 0x2e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x49, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x46, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2f, 0x61, 0x70, 0x69,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_rawDescOnce sync.Once
	file_api_proto_rawDescData = file_api_proto_rawDesc
)

func file_api_proto_rawDescGZIP() []byte {
	file_api_proto_rawDescOnce.Do(func() {
		file_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_rawDescData)
	})
	return file_api_proto_rawDescData
}

var file_api_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_api_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_api_proto_goTypes = []interface{}{
	(ChargeStatus)(0),                 // 0: terminal_message_microservice.ChargeStatus
	(ShipId)(0),                       // 1: terminal_message_microservice.ShipId
	(AlarmType)(0),                    // 2: terminal_message_microservice.AlarmType
	(CommunicationStatus2Dot4G)(0),    // 3: terminal_message_microservice.CommunicationStatus2dot4g
	(PhotosensitiveStatus)(0),         // 4: terminal_message_microservice.PhotosensitiveStatus
	(WiFiMode)(0),                     // 5: terminal_message_microservice.WiFiMode
	(VehicleEngineStatus)(0),          // 6: terminal_message_microservice.VehicleEngineStatus
	(VehicleLightStatus)(0),           // 7: terminal_message_microservice.VehicleLightStatus
	(SpeakerStatus)(0),                // 8: terminal_message_microservice.SpeakerStatus
	(OilCircuit)(0),                   // 9: terminal_message_microservice.OilCircuit
	(VehicleKey)(0),                   // 10: terminal_message_microservice.VehicleKey
	(CipherLock)(0),                   // 11: terminal_message_microservice.CipherLock
	(Alcohol)(0),                      // 12: terminal_message_microservice.Alcohol
	(*Period)(nil),                    // 13: terminal_message_microservice.Period
	(*TerminalStatus)(nil),            // 14: terminal_message_microservice.TerminalStatus
	(*Packet)(nil),                    // 15: terminal_message_microservice.Packet
	(*Field)(nil),                     // 16: terminal_message_microservice.Field
	(*ElectricDoorLock)(nil),          // 17: terminal_message_microservice.ElectricDoorLock
	(*Coordinate)(nil),                // 18: terminal_message_microservice.Coordinate
	(*WiFi)(nil),                      // 19: terminal_message_microservice.WiFi
	(*APInfo)(nil),                    // 20: terminal_message_microservice.APInfo
	(*BaseStation)(nil),               // 21: terminal_message_microservice.BaseStation
	(*Cell)(nil),                      // 22: terminal_message_microservice.Cell
	(*VehicleData)(nil),               // 23: terminal_message_microservice.VehicleData
	(*AlcoholDetection)(nil),          // 24: terminal_message_microservice.AlcoholDetection
	(*DormantLock)(nil),               // 25: terminal_message_microservice.DormantLock
	(*Temperatures)(nil),              // 26: terminal_message_microservice.Temperatures
	(*GetTerminalStatusRequest)(nil),  // 27: terminal_message_microservice.GetTerminalStatusRequest
	(*GetTerminalStatusResponse)(nil), // 28: terminal_message_microservice.GetTerminalStatusResponse
	(*GetTerminalTemperaturesInPeriodRequest)(nil),  // 29: terminal_message_microservice.GetTerminalTemperaturesInPeriodRequest
	(*GetTerminalTemperaturesInPeriodResponse)(nil), // 30: terminal_message_microservice.GetTerminalTemperaturesInPeriodResponse
	(*_struct.Struct)(nil),                          // 31: google.protobuf.Struct
}
var file_api_proto_depIdxs = []int32{
	0,  // 0: terminal_message_microservice.TerminalStatus.charge_status:type_name -> terminal_message_microservice.ChargeStatus
	31, // 1: terminal_message_microservice.TerminalStatus.extra_status:type_name -> google.protobuf.Struct
	16, // 2: terminal_message_microservice.Packet.fields:type_name -> terminal_message_microservice.Field
	1,  // 3: terminal_message_microservice.Field.ship_id:type_name -> terminal_message_microservice.ShipId
	0,  // 4: terminal_message_microservice.Field.charge_status:type_name -> terminal_message_microservice.ChargeStatus
	17, // 5: terminal_message_microservice.Field.electric_door_lock:type_name -> terminal_message_microservice.ElectricDoorLock
	2,  // 6: terminal_message_microservice.Field.alarm_type:type_name -> terminal_message_microservice.AlarmType
	18, // 7: terminal_message_microservice.Field.coordinate:type_name -> terminal_message_microservice.Coordinate
	3,  // 8: terminal_message_microservice.Field.communication_status_2dot4g:type_name -> terminal_message_microservice.CommunicationStatus2dot4g
	4,  // 9: terminal_message_microservice.Field.photosensitive_status:type_name -> terminal_message_microservice.PhotosensitiveStatus
	19, // 10: terminal_message_microservice.Field.wifi:type_name -> terminal_message_microservice.WiFi
	21, // 11: terminal_message_microservice.Field.base_station:type_name -> terminal_message_microservice.BaseStation
	23, // 12: terminal_message_microservice.Field.vehicle_data:type_name -> terminal_message_microservice.VehicleData
	24, // 13: terminal_message_microservice.Field.alcohol_detection:type_name -> terminal_message_microservice.AlcoholDetection
	25, // 14: terminal_message_microservice.Field.dormant_lock:type_name -> terminal_message_microservice.DormantLock
	5,  // 15: terminal_message_microservice.WiFi.wifi_mode:type_name -> terminal_message_microservice.WiFiMode
	20, // 16: terminal_message_microservice.WiFi.aps:type_name -> terminal_message_microservice.APInfo
	22, // 17: terminal_message_microservice.BaseStation.cells:type_name -> terminal_message_microservice.Cell
	6,  // 18: terminal_message_microservice.VehicleData.engine_status:type_name -> terminal_message_microservice.VehicleEngineStatus
	7,  // 19: terminal_message_microservice.VehicleData.light:type_name -> terminal_message_microservice.VehicleLightStatus
	8,  // 20: terminal_message_microservice.VehicleData.speaker:type_name -> terminal_message_microservice.SpeakerStatus
	9,  // 21: terminal_message_microservice.VehicleData.oil_circuit:type_name -> terminal_message_microservice.OilCircuit
	10, // 22: terminal_message_microservice.VehicleData.key:type_name -> terminal_message_microservice.VehicleKey
	11, // 23: terminal_message_microservice.VehicleData.cipher_lock:type_name -> terminal_message_microservice.CipherLock
	12, // 24: terminal_message_microservice.AlcoholDetection.alcohol:type_name -> terminal_message_microservice.Alcohol
	14, // 25: terminal_message_microservice.GetTerminalStatusResponse.terminal_status:type_name -> terminal_message_microservice.TerminalStatus
	13, // 26: terminal_message_microservice.GetTerminalTemperaturesInPeriodRequest.period:type_name -> terminal_message_microservice.Period
	26, // 27: terminal_message_microservice.GetTerminalTemperaturesInPeriodResponse.temps:type_name -> terminal_message_microservice.Temperatures
	27, // 28: terminal_message_microservice.TerminalMessageService.GetTerminalStatus:input_type -> terminal_message_microservice.GetTerminalStatusRequest
	29, // 29: terminal_message_microservice.TerminalMessageService.GetTerminalTemperaturesInPeriod:input_type -> terminal_message_microservice.GetTerminalTemperaturesInPeriodRequest
	28, // 30: terminal_message_microservice.TerminalMessageService.GetTerminalStatus:output_type -> terminal_message_microservice.GetTerminalStatusResponse
	30, // 31: terminal_message_microservice.TerminalMessageService.GetTerminalTemperaturesInPeriod:output_type -> terminal_message_microservice.GetTerminalTemperaturesInPeriodResponse
	30, // [30:32] is the sub-list for method output_type
	28, // [28:30] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_api_proto_init() }
func file_api_proto_init() {
	if File_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Period); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Packet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectricDoorLock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coordinate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WiFi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseStation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlcoholDetection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DormantLock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Temperatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTerminalStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTerminalStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTerminalTemperaturesInPeriodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTerminalTemperaturesInPeriodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Field_Iccid)(nil),
		(*Field_DataAcquisitionTime)(nil),
		(*Field_Sn)(nil),
		(*Field_FirmwareVersion)(nil),
		(*Field_PhoneNumber)(nil),
		(*Field_LoginReason)(nil),
		(*Field_Imsi)(nil),
		(*Field_ShipId)(nil),
		(*Field_WakeupReason)(nil),
		(*Field_Pbat)(nil),
		(*Field_ChargeStatus)(nil),
		(*Field_Gps)(nil),
		(*Field_Gsm)(nil),
		(*Field_Temp)(nil),
		(*Field_Voltage)(nil),
		(*Field_GSensor)(nil),
		(*Field_ElectricDoorLock)(nil),
		(*Field_GpsOpen)(nil),
		(*Field_RelayClose)(nil),
		(*Field_AlarmType)(nil),
		(*Field_Coordinate)(nil),
		(*Field_Altitude)(nil),
		(*Field_Speed)(nil),
		(*Field_Direction)(nil),
		(*Field_Pacc)(nil),
		(*Field_Moving)(nil),
		(*Field_CommunicationStatus_2Dot4G)(nil),
		(*Field_PhotosensitiveStatus)(nil),
		(*Field_Wifi)(nil),
		(*Field_BaseStation)(nil),
		(*Field_VehicleData)(nil),
		(*Field_AlcoholDetection)(nil),
		(*Field_DormantLock)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_goTypes,
		DependencyIndexes: file_api_proto_depIdxs,
		EnumInfos:         file_api_proto_enumTypes,
		MessageInfos:      file_api_proto_msgTypes,
	}.Build()
	File_api_proto = out.File
	file_api_proto_rawDesc = nil
	file_api_proto_goTypes = nil
	file_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TerminalMessageServiceClient is the client API for TerminalMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TerminalMessageServiceClient interface {
	// 获取终端最新状态
	GetTerminalStatus(ctx context.Context, in *GetTerminalStatusRequest, opts ...grpc.CallOption) (*GetTerminalStatusResponse, error)
	// 通过此接口可以获取终端在一段时间内的温度变化信息
	GetTerminalTemperaturesInPeriod(ctx context.Context, in *GetTerminalTemperaturesInPeriodRequest, opts ...grpc.CallOption) (*GetTerminalTemperaturesInPeriodResponse, error)
}

type terminalMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTerminalMessageServiceClient(cc grpc.ClientConnInterface) TerminalMessageServiceClient {
	return &terminalMessageServiceClient{cc}
}

func (c *terminalMessageServiceClient) GetTerminalStatus(ctx context.Context, in *GetTerminalStatusRequest, opts ...grpc.CallOption) (*GetTerminalStatusResponse, error) {
	out := new(GetTerminalStatusResponse)
	err := c.cc.Invoke(ctx, "/terminal_message_microservice.TerminalMessageService/GetTerminalStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalMessageServiceClient) GetTerminalTemperaturesInPeriod(ctx context.Context, in *GetTerminalTemperaturesInPeriodRequest, opts ...grpc.CallOption) (*GetTerminalTemperaturesInPeriodResponse, error) {
	out := new(GetTerminalTemperaturesInPeriodResponse)
	err := c.cc.Invoke(ctx, "/terminal_message_microservice.TerminalMessageService/GetTerminalTemperaturesInPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TerminalMessageServiceServer is the server API for TerminalMessageService service.
type TerminalMessageServiceServer interface {
	// 获取终端最新状态
	GetTerminalStatus(context.Context, *GetTerminalStatusRequest) (*GetTerminalStatusResponse, error)
	// 通过此接口可以获取终端在一段时间内的温度变化信息
	GetTerminalTemperaturesInPeriod(context.Context, *GetTerminalTemperaturesInPeriodRequest) (*GetTerminalTemperaturesInPeriodResponse, error)
}

// UnimplementedTerminalMessageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTerminalMessageServiceServer struct {
}

func (*UnimplementedTerminalMessageServiceServer) GetTerminalStatus(context.Context, *GetTerminalStatusRequest) (*GetTerminalStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTerminalStatus not implemented")
}
func (*UnimplementedTerminalMessageServiceServer) GetTerminalTemperaturesInPeriod(context.Context, *GetTerminalTemperaturesInPeriodRequest) (*GetTerminalTemperaturesInPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTerminalTemperaturesInPeriod not implemented")
}

func RegisterTerminalMessageServiceServer(s *grpc.Server, srv TerminalMessageServiceServer) {
	s.RegisterService(&_TerminalMessageService_serviceDesc, srv)
}

func _TerminalMessageService_GetTerminalStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTerminalStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalMessageServiceServer).GetTerminalStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terminal_message_microservice.TerminalMessageService/GetTerminalStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalMessageServiceServer).GetTerminalStatus(ctx, req.(*GetTerminalStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalMessageService_GetTerminalTemperaturesInPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTerminalTemperaturesInPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalMessageServiceServer).GetTerminalTemperaturesInPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/terminal_message_microservice.TerminalMessageService/GetTerminalTemperaturesInPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalMessageServiceServer).GetTerminalTemperaturesInPeriod(ctx, req.(*GetTerminalTemperaturesInPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TerminalMessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "terminal_message_microservice.TerminalMessageService",
	HandlerType: (*TerminalMessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTerminalStatus",
			Handler:    _TerminalMessageService_GetTerminalStatus_Handler,
		},
		{
			MethodName: "GetTerminalTemperaturesInPeriod",
			Handler:    _TerminalMessageService_GetTerminalTemperaturesInPeriod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
